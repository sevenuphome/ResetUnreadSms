buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.5+'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'android'

dependencies {
    compile files('libs/PayPal_MPL.jar')
//    compile 'org.androidannotations:androidannotations-api:3.0-SNAPSHOT'
}


android {
    compileSdkVersion 17
    buildToolsVersion '17.0.0'

    defaultConfig {
        minSdkVersion 3
        targetSdkVersion 17
        versionCode 8
        versionName '1.8'
        packageName 'net.tsoft.resetunreadsms'
    }

    signingConfigs {
        release {
            storeFile file('../kamosoft.keystore')
            keyAlias 'tbruyelle'
            keyPassword "$keypass"
            storePassword "$keypass"
        }
    }

    buildTypes {
        release {
            buildConfig "public static final String VERSION_NAME = \"${defaultConfig.versionName}\";"
            signingConfig signingConfigs.release
        }
        debug {
            buildConfig "public static final String VERSION_NAME = \"${defaultConfig.versionName}-DEBUG\";"
        }
    }


}

apply plugin: AndroidAnnotationsPlugin
androidannotations.version '3.0-SNAPSHOT'

class AndroidAnnotationsPlugin implements Plugin<Project> {
    void apply(Project project) {

        // get plugin configuration

        project.extensions.create('androidannotations', AndroidAnnotationsPluginExtension)
        project.afterEvaluate {
            def packageName = project.androidannotations.packageName ?: project.android.defaultConfig.packageName
            def version = project.androidannotations.version
            def groupId = 'org.androidannotations'

            project.configurations.create('apt')
            project.dependencies.add("apt", "$groupId:androidannotations:$version")
            project.dependencies.add("compile", "$groupId:androidannotations-api:$version")

            // directory of the AA generated classes
            def aptOutputDir = project.file("build/source/apt_generated")

            // add apt task to each applicationVariants
            project.android.applicationVariants.all { variant ->

                def newTask = "androidAnnotationsProcess${variant.name}"
                project.task(newTask) << {
                    def aptOutput = new File(aptOutputDir, variant.dirName)
                    println "Creating new task $newTask to generate class in ${aptOutput.path}"


                    project.android.sourceSets[getSourceSetName(variant)].java.srcDirs += aptOutput.getPath()

                    variant.javaCompile.options.compilerArgs += [
                            '-processorpath', project.configurations.apt.getAsPath(),
                            '-s', aptOutput,
                            "-AandroidManifestFile=${variant.processResources.manifestFile}",
                            "-AresourcePackageName=$packageName"
                    ]

                    variant.javaCompile.source = variant.javaCompile.source.filter { p ->
                        return !p.getPath().startsWith(aptOutputDir.getPath())
                    }

                    variant.javaCompile.doFirst {
                        aptOutput.mkdirs()
                    }
                }

                project.("compile${variant.name}").dependsOn(newTask)
            }
        }

    }

    def getSourceSetName(variant) {
        return new File(variant.dirName).getName();
    }

}

class AndroidAnnotationsPluginExtension {
    def version
    def packageName
}
